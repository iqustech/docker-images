/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImageInformation
 */
export interface ImageInformation {
    /**
     * 
     * @type {string}
     * @memberof ImageInformation
     */
    prompt: string;
    /**
     * 
     * @type {string}
     * @memberof ImageInformation
     */
    negative_prompt: string;
    /**
     * 
     * @type {number}
     * @memberof ImageInformation
     */
    steps: number;
    /**
     * 
     * @type {number}
     * @memberof ImageInformation
     */
    scale: number;
    /**
     * 
     * @type {number}
     * @memberof ImageInformation
     */
    seed: number;
    /**
     * 
     * @type {number}
     * @memberof ImageInformation
     */
    height: number;
    /**
     * 
     * @type {number}
     * @memberof ImageInformation
     */
    width: number;
    /**
     * 
     * @type {boolean}
     * @memberof ImageInformation
     */
    img2img: boolean;
    /**
     * 
     * @type {number}
     * @memberof ImageInformation
     */
    strength?: number;
}

/**
 * Check if a given object implements the ImageInformation interface.
 */
export function instanceOfImageInformation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "prompt" in value;
    isInstance = isInstance && "negative_prompt" in value;
    isInstance = isInstance && "steps" in value;
    isInstance = isInstance && "scale" in value;
    isInstance = isInstance && "seed" in value;
    isInstance = isInstance && "height" in value;
    isInstance = isInstance && "width" in value;
    isInstance = isInstance && "img2img" in value;

    return isInstance;
}

export function ImageInformationFromJSON(json: any): ImageInformation {
    return ImageInformationFromJSONTyped(json, false);
}

export function ImageInformationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageInformation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'prompt': json['prompt'],
        'negative_prompt': json['negative_prompt'],
        'steps': json['steps'],
        'scale': json['scale'],
        'seed': json['seed'],
        'height': json['height'],
        'width': json['width'],
        'img2img': json['img2img'],
        'strength': !exists(json, 'strength') ? undefined : json['strength'],
    };
}

export function ImageInformationToJSON(value?: ImageInformation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'prompt': value.prompt,
        'negative_prompt': value.negative_prompt,
        'steps': value.steps,
        'scale': value.scale,
        'seed': value.seed,
        'height': value.height,
        'width': value.width,
        'img2img': value.img2img,
        'strength': value.strength,
    };
}

