/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BuildEngineError
 */
export interface BuildEngineError {
    /**
     * 
     * @type {string}
     * @memberof BuildEngineError
     */
    type?: BuildEngineErrorTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BuildEngineError
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildEngineError
     */
    message: string;
}


/**
 * @export
 */
export const BuildEngineErrorTypeEnum = {
    error: 'error'
} as const;
export type BuildEngineErrorTypeEnum = typeof BuildEngineErrorTypeEnum[keyof typeof BuildEngineErrorTypeEnum];


/**
 * Check if a given object implements the BuildEngineError interface.
 */
export function instanceOfBuildEngineError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function BuildEngineErrorFromJSON(json: any): BuildEngineError {
    return BuildEngineErrorFromJSONTyped(json, false);
}

export function BuildEngineErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): BuildEngineError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'error': !exists(json, 'error') ? undefined : json['error'],
        'message': json['message'],
    };
}

export function BuildEngineErrorToJSON(value?: BuildEngineError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'error': value.error,
        'message': value.message,
    };
}

