/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PluginMetaData } from './PluginMetaData';
import {
    PluginMetaDataFromJSON,
    PluginMetaDataFromJSONTyped,
    PluginMetaDataToJSON,
} from './PluginMetaData';

/**
 * 
 * @export
 * @interface PluginData
 */
export interface PluginData {
    /**
     * 
     * @type {PluginMetaData}
     * @memberof PluginData
     */
    meta: PluginMetaData;
    /**
     * 
     * @type {string}
     * @memberof PluginData
     */
    module: string;
    /**
     * 
     * @type {string}
     * @memberof PluginData
     */
    dir: string;
    /**
     * 
     * @type {boolean}
     * @memberof PluginData
     */
    js: boolean;
}

/**
 * Check if a given object implements the PluginData interface.
 */
export function instanceOfPluginData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "meta" in value;
    isInstance = isInstance && "module" in value;
    isInstance = isInstance && "dir" in value;
    isInstance = isInstance && "js" in value;

    return isInstance;
}

export function PluginDataFromJSON(json: any): PluginData {
    return PluginDataFromJSONTyped(json, false);
}

export function PluginDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meta': PluginMetaDataFromJSON(json['meta']),
        'module': json['module'],
        'dir': json['dir'],
        'js': json['js'],
    };
}

export function PluginDataToJSON(value?: PluginData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'meta': PluginMetaDataToJSON(value.meta),
        'module': value.module,
        'dir': value.dir,
        'js': value.js,
    };
}

